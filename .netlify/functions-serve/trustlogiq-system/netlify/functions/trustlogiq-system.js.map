{
  "version": 3,
  "sources": ["../../../../../../Users/julius/Documents/Celiphili-merged/netlify/functions/trustlogiq-system.js"],
  "sourceRoot": "/var/folders/1g/53cf88r51yngl1xgbxllrz900000gn/T/tmp-44489-qOoQ818OCmAH",
  "sourcesContent": ["class TrustLogiQ {\n  constructor() {\n    this.apiKey = process.env.COINGLASS_API_KEY || 'b301b0371fd140c6800a1d11863bcf23';\n    this.baseUrl = 'https://open-api.coinglass.com/public/v2';\n    this.confidenceThreshold = 0.75;\n    this.minTradeConfidence = 0.6;\n    this.penaltyDecay = 0.95;\n    this.adaptationRate = 0.02;\n    this.penaltyPoints = {\n      liquidations: 0,\n      fundingRate: 0,\n      longShortRatio: 0,\n      openInterest: 0\n    };\n  }\n\n  async fetchCoinglass(endpoint, params = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers = {\n      'CG-API-KEY': this.apiKey,\n      'Content-Type': 'application/json'\n    };\n    \n    try {\n      const response = await fetch(url, { headers });\n      return await response.json();\n    } catch (error) {\n      console.error(`API Error: ${error}`);\n      return null;\n    }\n  }\n\n  async getMarketData(symbol) {\n    const [liquidations, funding, ratio, oi] = await Promise.all([\n      this.fetchCoinglass('/liquidation/chart', { symbol, time: '1h' }),\n      this.fetchCoinglass('/funding_rate', { symbol }),\n      this.fetchCoinglass('/global_long_short', { symbol }),\n      this.fetchCoinglass('/open_interest/chart', { symbol, time: '4h' })\n    ]);\n\n    return {\n      liquidations: this.parseLiquidations(liquidations),\n      fundingRate: funding?.data?.[0]?.rate || 0,\n      longShortRatio: ratio?.data?.longShortRatio || 1,\n      openInterest: this.calculateOIChange(oi)\n    };\n  }\n\n  parseLiquidations(data) {\n    if (!data?.data) return 0;\n    const recent = data.data.slice(-1)[0];\n    return (recent?.buyVol || 0) - (recent?.sellVol || 0);\n  }\n\n  calculateOIChange(data) {\n    if (!data?.data || data.data.length < 2) return 0;\n    const current = data.data[data.data.length - 1]?.value || 0;\n    const previous = data.data[data.data.length - 2]?.value || 1;\n    return ((current - previous) / previous) * 100;\n  }\n\n  normalizeToSignal(value, key) {\n    const thresholds = {\n      liquidations: { bull: 50000000, bear: -50000000 },\n      fundingRate: { bull: -0.03, bear: 0.05 },\n      longShortRatio: { bull: 0.85, bear: 1.15 },\n      openInterest: { bull: 10, bear: -10 }\n    };\n\n    const t = thresholds[key];\n    if (!t) return 0;\n\n    switch(key) {\n      case 'liquidations':\n        return value > t.bull ? 1 : value < t.bear ? -1 : value / t.bull;\n      case 'fundingRate':\n        return value < t.bull ? 1 : value > t.bear ? -1 : -value / t.bear;\n      case 'longShortRatio':\n        return value < t.bull ? 1 : value > t.bear ? -1 : (1 - value) * 5;\n      case 'openInterest':\n        return value > t.bull ? 1 : value < t.bear ? -1 : value / t.bull;\n      default:\n        return 0;\n    }\n  }\n\n  calculateConfidence(inputs) {\n    let weightedScore = 0;\n    let totalWeight = 0;\n    \n    Object.entries(inputs).forEach(([key, value]) => {\n      const weight = Math.max(0.1, 1 - this.penaltyPoints[key]);\n      const signal = this.normalizeToSignal(value, key);\n      weightedScore += signal * weight;\n      totalWeight += weight;\n    });\n    \n    return totalWeight > 0 ? weightedScore / totalWeight : 0;\n  }\n\n  getRecommendation(confidence) {\n    if (Math.abs(confidence) >= this.confidenceThreshold) {\n      return { action: confidence > 0 ? \"LONG\" : \"SHORT\", execute: true };\n    }\n    if (Math.abs(confidence) >= this.minTradeConfidence) {\n      return { action: confidence > 0 ? \"LONG\" : \"SHORT\", execute: false };\n    }\n    return { action: \"HOLD\", execute: false };\n  }\n\n  adaptSystem(correct, inputs) {\n    Object.keys(inputs).forEach(key => {\n      if (correct) {\n        this.penaltyPoints[key] *= this.penaltyDecay;\n      } else {\n        this.penaltyPoints[key] += 0.05;\n      }\n    });\n  }\n\n  async analyze(symbol) {\n    const marketData = await this.getMarketData(symbol);\n    const confidence = this.calculateConfidence(marketData);\n    const recommendation = this.getRecommendation(confidence);\n    \n    return {\n      symbol,\n      confidence: Math.round(confidence * 100),\n      recommendation,\n      data: marketData,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\nclass AlertSystem {\n  constructor(botToken, chatId) {\n    this.botToken = botToken;\n    this.chatId = chatId;\n    this.telegramUrl = `https://api.telegram.org/bot${botToken}`;\n  }\n\n  async sendAlert(message) {\n    console.log(`ALERT: ${message}`);\n    // Telegram integration would go here\n  }\n}\n\nclass TradingBot {\n  constructor() {\n    this.trustlogiq = new TrustLogiQ();\n    this.symbols = ['BTC', 'ETH', 'SOL'];\n    this.alerts = new AlertSystem(\n      process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN',\n      process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID'\n    );\n    this.tradeHistory = [];\n  }\n\n  async run() {\n    console.log(`[${new Date().toISOString()}] Running analysis...`);\n    const results = [];\n    \n    for (const symbol of this.symbols) {\n      try {\n        const analysis = await this.trustlogiq.analyze(symbol);\n        \n        if (analysis.recommendation.execute) {\n          const alert = `\uD83D\uDEA8 ${symbol} SIGNAL\nAction: ${analysis.recommendation.action}\nConfidence: ${analysis.confidence}%\nLiquidations: $${(analysis.data.liquidations / 1e6).toFixed(2)}M\nFunding: ${(analysis.data.fundingRate * 100).toFixed(3)}%\nL/S Ratio: ${analysis.data.longShortRatio.toFixed(3)}\nOI Change: ${analysis.data.openInterest.toFixed(2)}%`;\n          \n          await this.alerts.sendAlert(alert);\n          this.tradeHistory.push(analysis);\n        }\n        \n        console.log(`${symbol}: ${analysis.recommendation.action} (${analysis.confidence}%)`);\n        results.push(analysis);\n      } catch (error) {\n        console.error(`Error analyzing ${symbol}:`, error);\n      }\n    }\n    \n    return results;\n  }\n}\n\nmodule.exports = { TrustLogiQ, TradingBot };"],
  "mappings": "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",
  "names": []
}
